<html>
<head>
<script src="https://aframe.io/releases/0.6.1/aframe.min.js"></script>
<script src="https://jeromeetienne.github.io/AR.js/aframe/build/aframe-ar.min.js"></script>
<script>THREEx.ArToolkitContext.baseURL = 'https://jeromeetienne.github.io/AR.js/three.js/'</script>
<script>
AFRAME.registerComponent('transparent-texture', {
	
	init: function () {
		this.applyToMesh();
		var $this = this;
		this.el.addEventListener('model-loaded', function(){ return $this.applyToMesh(); });
	},
	
	applyToMesh: function() {
		const mesh = this.el.getObject3D('mesh');
		if (mesh)
			mesh.traverse( function( child ) {
				if ( child.isMesh )
				{
					child.material.transparent = true;
					child.material.alphaTest = 0.5;
				}
			});
	}
	
});


AFRAME.registerComponent('gps-position', {
	
	watchId: null,
	zeroCrd: null,
	crd: null,
	
	schema: {
		accuracy: {
			type: 'int',
			default: 100
		},
		'zero-crd-latitude': {
			type: 'number',
			default: NaN
		},
		'zero-crd-longitude': {
			type: 'number',
			default: NaN
		}
	},
	
	init: function () {
		
		if(!isNaN(this.data['zero-crd-latitude']) && !isNaN(this.data['zero-crd-longitude'])){
			this.zeroCrd = {latitude: this.data['zero-crd-latitude'], longitude: this.data['zero-crd-longitude']};
		}
		
		this.watchId = this.watchGPS(function(position){
			this.crd = position.coords;
			this.updatePosition();
		}.bind(this));
		
	},
	
	watchGPS: function (success, error) {
		
		if(typeof(error) == 'undefined')
			error = function(err) { console.warn('ERROR('+err.code+'): '+err.message); };
		
		if (!("geolocation" in navigator)){
			error({code: 0, message: 'Geolocation is not supported by your browser'});
			return;
		}
		
		return navigator.geolocation.watchPosition(success, error, {enableHighAccuracy: true, maximumAge: 0, timeout: 27000});
	},
	
	updatePosition: function () {
		
		if(this.crd.accuracy > this.data.accuracy) return;
		
		if(!this.zeroCrd) this.zeroCrd = this.crd;
		
		var p = this.el.getAttribute('position');
		
		p.x = this.calcMeters(
			this.zeroCrd,
			{
				longitude: this.crd.longitude,
				latitude: this.zeroCrd.latitude
			}
		) * (
			this.crd.longitude > this.zeroCrd.longitude
				? -1 : 1
		);
		p.z = this.calcMeters(
			this.zeroCrd,
			{
				longitude: this.zeroCrd.longitude,
				latitude: this.crd.latitude
			}
		) * (
			this.crd.latitude > this.zeroCrd.latitude
				? -1 : 1
		);
		
		this.el.setAttribute('position', p);
		
	},
	
	calcMeters: function(src, dest) {
		var dlon = THREE.Math.degToRad(dest.longitude - src.longitude);
		var dlat = THREE.Math.degToRad(dest.latitude - src.latitude);
		
		var a = (Math.sin(dlat / 2) * Math.sin(dlat / 2)) + Math.cos(THREE.Math.degToRad(src.latitude)) * Math.cos(THREE.Math.degToRad(dest.latitude)) * (Math.sin(dlon / 2) * Math.sin(dlon / 2));
		var angle = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
		
		return angle * 6378160;
	},
	
	remove: function() {
		if(this.watchId) navigator.geolocation.clearWatch(this.watchId);
		this.watchId = null;
	}
	
});


AFRAME.registerComponent('compass-rotation', {
	
	lookControls: null,
	lastTimestamp: 0,
	heading: null,
	
	schema: {
		fixTime: {
			type: 'int',
			default: 3000
		}
	},
	
	init: function () {
		
		if(typeof(this.el.components['look-controls']) == 'undefined') return;
		
		this.lookControls = this.el.components['look-controls'];
		
		this.handlerOrientation = this.handlerOrientation.bind(this);
		
		if('ondeviceorientationabsolute' in window){
			window.addEventListener('deviceorientationabsolute', this.handlerOrientation, false);
		}else if('ondeviceorientation' in window){
			window.addEventListener('deviceorientation', this.handlerOrientation, false);
		}else{
			alert('Compass not supported');
		}
		
		window.addEventListener('compassneedscalibration', function(event) {
			alert('Your compass needs calibrating! Wave your device in a figure-eight motion');
			event.preventDefault();
		}, true);
		
	},
	
	tick: function (time, timeDelta) {
		
		if(this.heading === null
		|| this.lastTimestamp > (time - this.data.fixTime)) return;
		
		this.lastTimestamp = time;
		this.updateRotation();
		
	},
	
	calcCompassHeading: function (alpha, beta, gamma) {
		
		// Convert degrees to radians
		var alphaRad = alpha * (Math.PI / 180);
		var betaRad = beta * (Math.PI / 180);
		var gammaRad = gamma * (Math.PI / 180);
		
		// Calculate equation components
		var cA = Math.cos(alphaRad);
		var sA = Math.sin(alphaRad);
		var cB = Math.cos(betaRad);
		var sB = Math.sin(betaRad);
		var cG = Math.cos(gammaRad);
		var sG = Math.sin(gammaRad);
		
		// Calculate A, B, C rotation components
		var rA = - cA * sG - sA * sB * cG;
		var rB = - sA * sG + cA * sB * cG;
		var rC = - cB * cG;
		
		// Calculate compass heading
		var compassHeading = Math.atan(rA / rB);
		
		// Convert from half unit circle to whole unit circle
		if(rB < 0) {
			compassHeading += Math.PI;
		}else if(rA < 0) {
			compassHeading += 2 * Math.PI;
		}
		
		// Convert radians to degrees
		compassHeading *= 180 / Math.PI;
		
		return compassHeading;
	},
	
	handlerOrientation: function (evt) {
		
		var heading = null;
		
		if(typeof(evt.webkitCompassHeading) != 'undefined'){
			
			if(evt.webkitCompassAccuracy < 50){
				heading = evt.webkitCompassHeading;
			}else{
				console.warn('webkitCompassAccuracy is evt.webkitCompassAccuracy');
			}
			
		}else if(evt.alpha !== null){
			if(evt.absolute === true || typeof(evt.absolute == 'undefined')) {
				heading = this.calcCompassHeading(evt.alpha, evt.beta, evt.gamma);
			}else{
				console.warn('evt.absolute === false');
			}
		}else{
			console.warn('evt.alpha === null');
		}
		
		this.heading = heading;
		
	},
	
	updateRotation: function() {
		
		var heading = this.heading + 360;
		
		var camera_rotation = this.el.getAttribute('rotation').y;
		var yaw_rotation = THREE.Math.radToDeg(this.lookControls.yawObject.rotation.y);
		// yaw_rotation постепенно поглащается camera_rotation
		var offset = (heading - (camera_rotation - yaw_rotation)) % 360;
		
	//	console.log('yaw_rotation = ('+this.heading+' + 360) - (camera_rotation + '+yaw_rotation+')');
		
		this.lookControls.yawObject.rotation.y = offset;
		
	}
	
});



window.onload = function(){
	
	var camera = document.getElementById('camera');
	
	
	camera.addEventListener('componentchanged', function (evt) {
		switch(evt.detail.name){
			case 'rotation':
				//console.log('camera rotation changed', evt.detail.newData);
				camera_angle.innerText = evt.detail.newData.y;
				yaw_angle.innerText = THREE.Math.radToDeg(camera.components['look-controls'].yawObject.rotation.y);
				compass_heading.innerText = 2 * Math.PI - camera.components['compass-rotation'].heading
				break;
			case 'position':
				//console.log('camera position changed', evt.detail.newData);
				camera_p_x.innerText = evt.detail.newData.x;
				camera_p_z.innerText = evt.detail.newData.z;
				break;
		}
	});
	
};


</script>
</head>
<body style='margin: 0px; overflow: hidden;'>
	
	<div style="position: fixed; top: 10px; width:100%; text-align: center; z-index: 1; text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white;">
		<div>
			coords: <span id="crd_longitude"></span>, <span id="crd_latitude"></span>
				(zero coords: <span id="zero_crd_longitude"></span>, <span id="zero_crd_latitude"></span>)
		</div>
		<div>
			camera coords: <span id="camera_p_x"></span>, <span id="camera_p_z"></span>
		</div>
		<div>
			compass heading: <span id="compass_heading"></span>,
			camera angle: <span id="camera_angle"></span>,
			yaw angle: <span id="yaw_angle"></span>
		</div>
	</div>
	
	<a-scene embedded artoolkit='sourceType: webcam;'>
		
		<a-camera id="camera" user-height="1.6" gps-position compass-rotation><!--  --></a-camera>
		
		<a-assets>
			<a-asset-item id="fence_asset" src="fence11.dae"></a-asset-item>
		</a-assets>
		
		<a-entity id="fence" collada-model="#fence_asset" transparent-texture></a-entity>
		
	</a-scene>
</body>
</html>
